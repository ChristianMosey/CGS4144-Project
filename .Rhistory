tibble::column_to_rownames("Gene")
# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
tibble::column_to_rownames("Gene")
# Make the data in the order of the metadata
expression_df <- expression_df %>%
dplyr::select(metadata$refinebio_accession_code)
# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)
# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
tibble::column_to_rownames("Gene")
# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
tibble::column_to_rownames("Gene")
# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
tibble::column_to_rownames("Gene")
# Make the data in the order of the metadata
expression_df <- expression_df %>%
dplyr::select(metadata$refinebio_accession_code)
# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)
# Make the data in the order of the metadata
expression_df <- expression_df %>%
dplyr::select(metadata$rtitle)
all.equal(colnames(expression_df), metadata$rtitle)
expression_df <- readr::read_tsv(data_file) %>%
tibble::column_to_rownames("Gene")
metadata <- readr::read_tsv(metadata_file)
ddset <- DESeqDataSetFromMatrix(
# Here we supply non-normalized count data
countData = countData,
# Supply the `colData` with our metadata data frame
colData = metadata,
# Supply our experimental variable to `design`
design = ~mutation_status
)
deseq_object <- DESeq(ddset)
ddset <- DESeqDataSetFromMatrix(
# Here we supply non-normalized count data
countData = countData,
# Supply the `colData` with our metadata data frame
colData = colData,
# Supply our experimental variable to `design`
design = ~mutation_status
)
ddset <- DESeqDataSetFromMatrix(
# Here we supply non-normalized count data
countData = countData,
# Supply the `colData` with our metadata data frame
colData = colData,
# Supply our experimental variable to `design`
design = ~rtitle
)
View(colData)
View(colData)
ddset <- DESeqDataSetFromMatrix(
# Here we supply non-normalized count data
countData = countData,
# Supply the `colData` with our metadata data frame
colData = colData,
# Supply our experimental variable to `design`
design = ~geo_accession
)
browseVignettes("topGO")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
browseVignettes("topGO")
library(topGO)
> library(ALL)
library(all)
library(ALL)
library(topGO)
library(ALL)
data(ALL)
data(dds)
View(dds)
View(dds)
View(ddset)
View(ddset)
View(dds)
View(dds)
sampleGOdata <- new("topGOdata",
+ description = "Simple session", ontology = "BP",
sampleGOdata <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = dds, geneSel = ddset,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = countData, geneSel = dds,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
View(colData)
View(colData)
View(countData)
View(countData)
View(colData)
View(colData)
View(countData)
View(countData)
View(dds)
View(dds)
View(expression_df)
View(expression_df)
View(metadata)
View(metadata)
View(vsd)
View(vsd)
View(countData)
View(countData)
BiocManager::install("clusterProfiler")
browseVignettes("clusterProfiler")
BiocManager::install("DOSE")
BiocManager::install("DOSE")
browseVignettes("DOSE")
library(clusterProfiler)
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
# Entrez gene ID
head(gene)
view(geneList)
data(geneList, package="DOSE")
ggo <- groupGO(gene     = gene,
OrgDb    = org.Hs.eg.db,
ont      = "CC",
level    = 3,
readable = TRUE)
ggo <- groupGO(gene     = gene,
OrgDb    = dds,
ont      = "CC",
level    = 3,
readable = TRUE)
library(DESeq2)
library(ggplot2)
library(magrittr)
deseq_object <- DESeq(dds)
deseq_results <- results(deseq_object)
deseq_results <- lfcShrink(
deseq_object, # The original DESeq2 object after running DESeq()
coef = 2, # The log fold change coefficient used in DESeq(); the default is 2.
res = deseq_results # The original DESeq2 results table
)
deseq_results <- lfcShrink(
deseq_object, # The original DESeq2 object after running DESeq()
coef = 2, # The log fold change coefficient used in DESeq(); the default is 2.
res = deseq_results # The original DESeq2 results table
)
deseq_results <- lfcShrink(
deseq_object, # The original DESeq2 object after running DESeq()
coef = 6, # The log fold change coefficient used in DESeq(); the default is 2.
res = deseq_results # The original DESeq2 results table
)
colData <- colData %>%
dplyr::mutate(
# Here we define the values our factor variable can have and their order.
characteristics_ch1 = factor(characteristics_ch1, levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
colData <- colData %>%
colData <- colData %>%
dplyr::mutate(
# Here we define the values our factor variable can have and their order.
characteristics_ch1 = factor(characteristics_ch1, levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
.
colData <- colData %>%
dplyr::mutate(
# Here we define the values our factor variable can have and their order.
characteristics_ch1 = factor(characteristics_ch1, levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
colData <- colData %>%
dplyr::mutate(
# Here we define the values our factor variable can have and their order.
characteristics_ch1 = factor(characteristics_ch1, levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
)
colData <- colData %>%
dplyr::mutate(
# Here we define the values our factor variable can have and their order.
characteristics_ch1 = factor(characteristics_ch1, levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
colDataCopy <- colData
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
ddset <- DESeqDataSetFromMatrix(countData = countData, colData = colDataCopy, design = ~characteristics_ch1)
deseq_object <- DESeq(ddset)
deseq_results <- lfcShrink(deseq_object, coef = 6, coef = 6, res = deseq_results)
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
ddset <- DESeqDataSetFromMatrix(countData = countData, colData = colDataCopy, design = ~characteristics_ch1)
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
ddset <- DESeqDataSetFromMatrix(countData = countData, colData = colDataCopy, design = ~characteristics_ch1)
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
ddset <- DESeqDataSetFromMatrix(countData = countData, colData = colDataCopy, design = ~characteristics_ch1)
deseq_object <- DESeq(ddset)
View(colDataCopy)
View(colDataCopy)
View(colDataCopy)
View(colDataCopy)
View(colDataCopy)
colDataCopy[,9] = factor(colDataCopy[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
View(colData)
View(colData)
colDataCopy[,9] = factor(colData[,9], levels = c("endometriosis", "atypical endometriosis", "adjacent endometriosis to clear cell ovarian carcinoma", "adjacent endometriosis to endometrioid ovarian carcinoma", "clear cell ovarian carcinoma", "endometrioid ovarian carcinoma"))
View(colDataCopy)
View(colDataCopy)
ddset <- DESeqDataSetFromMatrix(countData = countData, colData = colDataCopy, design = ~characteristics_ch1)
deseq_object <- DESeq(ddset)
deseq_results <- lfcShrink(deseq_object, coef = 6, res = deseq_results)
deseq_results <- lfcShrink(deseq_object, coef = 6, coef = 6, res = deseq_results)
deseq_results <- lfcShrink(deseq_object, coef = 6, res = deseq_results)
deseq_results
deseq_results <- lfcShrink(deseq_object, coef = 5, res = deseq_results)
deseq_results <- lfcShrink(deseq_object, coef = 2, res = deseq_results)
deseq_results <- lfcShrink(deseq_object, coef = 6, res = deseq_results)
deseq_results
ddset <- DESeqDataSetFromMatrix(countData = countData, colData = colDataCopy, design = ~characteristics_ch1)
ddset
colDataCopy
View(colDataCopy)
View(colDataCopy)
resultsNames()
resultsNames(deseq_object)
ddset <- DESeqDataSetFromMatrix(countData = countData, colData = colDataCopy, design = ~characteristics_ch1)
deseq_results <- lfcShrink(deseq_object, coef = 6, res = deseq_results)
View(deseq_results)
View(deseq_results)
deseq_results <- results(deseq_object)
deseq_results <- lfcShrink(deseq_object, coef = 6, res = deseq_results)
deseq_df <- deseq_results %>%
as.data.frame() %>%
tibble::rownames_to_column("Gene") %>%
dplyr::mutate(threshold = padj < 0.05) %>%
dplyr::arrange(dplyr::desc(log2FoldChange))
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = deseq_df$Gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01
)
View(volcano_plot)
View(volcano_plot)
View(volcano_plot)
volcano_plot
head(deseq_df)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DOSE")
browseVignettes("DOSE")
library(clusterProfiler)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO"
)
browseVignettes("topGO")
library(topGO)
library(ALL)
data(ALL)
view(geneList)
geneList
dds
view(dds)
View(dds)
View(dds)
BPterms <- ls(GOBPTerm)
head(BPterms)
library(goseq)
BiocManager::install("goseq")
library(goseq)
View(ddset)
View(expression_df)
View(colDataCopy)
View(colDataCopy)
View(colDataCopy)
View(colDataCopy)
geneList <- ColDataCopy[1,]
geneList <- colDataCopy[1,]
geneList
View(colDataCopy)
View(colDataCopy)
View(colDataCopy)
View(colDataCopy)
geneList = colDataCopy(header = "geo_accession")
geneList = colDataCopy[header = "geo_accession"]
geneList = colDataCopy[0,]
geneList = colDataCopy[1,]
geneList = colDataCopy[2,]
geneList = colDataCopy[,1]
geneList
geneList = colDataCopy[,2]
geneList = colDataCopy[,0]
geneList = colDataCopy[,0]
geneList = colDataCopy[,1]
geneList[0]
geneList[1]
geneList[2]
geneList[3]
geneList[4]
dds
geneList = dds[rownames()]
geneList = dds[rownames(i)]
geneList = dds[rownames(x)]
geneList = dds[rownames(0)]
View(geneList)
View(geneList)
dds
View(dds)
View(dds)
View(deseq_object)
View(deseq_object)
View(deseq_results)
View(deseq_results)
geneList = deseq_results[`rownames<-`()]
geneList = dds$geo_accession
geneList
ht = Heatmap(mat)
BiocManager::install("ComplexHeatmap")
heatmap(dds)
heatmap(ddset)
deseq_df
deseq_results
sigs.df <- as.data.frame(deseq_results)
sigs.df
sigs.df <- as.data.frame(deseq_df)
sigs.df
deseq_results
sigs.df <- as.data.frame(deseq_results)
sigs.df
deseq_results
View(deseq_object)
View(deseq_df)
View(deseq_df)
View(deseq_df)
deseq_df
sigs.df <- as.data.frame(deseq_df)
sigs.df
expression_df
counts(dds, normalized = T)
sizeFactors(dds)
View(dds)
View(dds)
View(ddset)
View(deseq_df)
View(deseq_df)
desed_df
deseq_df
sigs.df = deseq_df[,]
sigs.df
View(sigs.df)
View(sigs.df)
sigs.df$symbol <- mapIds(org.hs.eg.db, keys = rownames(sigs.df), keytype = "ENSEMBL", column = "SYMBOL")
library("org.Hs.eg.db")
sigs.df$symbol <- mapIds(org.Hs.eg.db, keys = rownames(sigs.df), keytype = "ENSEMBL", column = "SYMBOL")
View(sigs.df)
View(sigs.df)
counts(dds, normalized = T)
counts(ddset, normalized = T)
counts(ddset_df, normalized = T)
counts(ddseq_df, normalized = T)
counts(deseq_object, normalized = T)
counts(deseq_object, normalized = T)[rownames(sigs.df),]
counts(deseq_object, normalized = T)[rownames(sigs.df),]
View(colData)
View(colData)
View(colData)
View(colDataCopy)
View(countData)
View(countData)
View(dds)
View(ddset)
View(deseq_df)
View(ddset)
View(dds)
View(countData)
counts(countData)
View(metadata)
View(metadata)
View(volcano_plot)
View(volcano_plot)
View(volcano_plot)
View(vsd)
View(sigs.df)
View(sigs.df)
View(metadata)
View(expression_df)
View(expression_df)
View(expression_df)
counts(expression_df, normalized = T)
expression_df[rownames(sigs.dg),]
expression_df[rownames(sigs.df),]
View(sigs.df)
expression_df[geneList,]
View(sigs.df)
View(expression_df)
data.matrix(expression_df)
mat <- data.matrix(expression_df)
View(mat)
View(mat)
t(apply(mat, 1, scale))
mat.z <- t(apply(mat, 1, scale))
Heatmap(mat.z, cluster_rows = T, cluster_colums = T, column_labels = colnames(mat.z), name = "Z-score")
heatmap(mat.z, cluster_rows = T, cluster_colums = T, column_labels = colnames(mat.z), name = "Z-score")
ht = heatmap(mat.z, cluster_rows = T, cluster_colums = T, column_labels = colnames(mat.z), name = "Z-score")
ht
draw(ht)
ht = Heatmap(mat.z, cluster_rows = T, cluster_colums = T, column_labels = colnames(mat.z), name = "Z-score")
ht = heatmap(mat.z, cluster_rows = T, cluster_colums = T, column_labels = colnames(mat.z), name = "Z-score")
library("ComplexHeatmap")
ht = Heatmap(mat.z, cluster_rows = T, cluster_colums = T, column_labels = colnames(mat.z), name = "Z-score", row_labels = rownames(sigs.df))
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat.z), name = "Z-score", row_labels = rownames(sigs.df))
draw(ht)
ht = Heatmap(mat.z)
draw(ht)
View(mat.z)
View(mat.z)
sigs.df <- sigs.df[(sigs.df$baseMean > 100) & (abs(sigs.df$log2FoldChange > 1))]
View(sigs.df)
View(sigs.df)
sigs.df <- sigs.df[(sigs.df$baseMean > 150) & (abs(sigs.df$log2FoldChange) > 1.5)]
sigs.df <- sigs.df[(sigs.df$baseMean > 150) & (abs(sigs.df$log2FoldChange) > 1.5),]
ht = Heatmap(mat.z)
draw(ht)
View(sigs.df)
mat <- data.matrix(expression_df[sigs.df$Gene,])
View(mat)
View(mat)
View(mat)
t(apply(mat, 1, scale))
mat.z <- t(apply(mat, 1, scale))
ht = Heatmap(mat.z)
draw(ht)
sigs.df <- sigs.df[(sigs.df$baseMean > 150) & (abs(sigs.df$log2FoldChange) > 1.75),]
mat <- data.matrix(expression_df[sigs.df$Gene,])
mat.z <- t(apply(mat, 1, scale))
ht = Heatmap(mat.z)
draw(ht)
sigs.df <- sigs.df[(sigs.df$baseMean > 200) & (abs(sigs.df$log2FoldChange) > 2),]
mat <- data.matrix(expression_df[sigs.df$Gene,])
mat.z <- t(apply(mat, 1, scale))
ht = Heatmap(mat.z)
draw(ht)
ht <- Heatmap(mat.z)
png('simple_heatmap.png', res = 250, width = 1000, height = 2000)
print(ht)
dev.off()
View(sigs.df)
View(sigs.df)
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat.z), name = "Z-score", row_labels = sigs.df[rownames(mat.z),]$Gene)
draw(ht)
View(mat.z)
View(mat.z)
View(mat.z)
View(sigs.df)
View(mat)
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat), name = "Z-score", row_labels = sigs.df[rownames(mat.z),]$Gene)
draw(ht)
sigs.df <- sigs.df[(sigs.df$baseMean > 200) & (abs(sigs.df$log2FoldChange) > 2),]
mat <- data.matrix(expression_df[sigs.df$Gene,])
mat.z <- t(apply(mat, 1, scale))
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat), name = "Z-score", row_labels = sigs.df[rownames(mat.z),]$Gene)
draw(ht)
sigs.df <- sigs.df[(sigs.df$baseMean > 250 & (abs(sigs.df$log2FoldChange) > 2.5),]
sigs.df <- sigs.df[(sigs.df$baseMean > 250 & (abs(sigs.df$log2FoldChange) > 2.5)),]
mat <- data.matrix(expression_df[sigs.df$Gene,])
mat.z <- t(apply(mat, 1, scale))
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat), name = "Z-score", row_labels = sigs.df[rownames(mat.z),]$Gene)
draw(ht)
View(mat.z)
View(mat.z)
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat), name = "Z-score", row_labels = rownames(mat))
draw(ht)
draw(ht)
sigs.df <- sigs.df[(sigs.df$baseMean > 300 & (abs(sigs.df$log2FoldChange) > 3)),]
mat <- data.matrix(expression_df[sigs.df$Gene,])
mat.z <- t(apply(mat, 1, scale))
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat), name = "Z-score", row_labels = sigs.df[rownames(mat.z),]$Gene)
draw(ht)
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat), name = "Z-score", row_labels = rownames(mat.z)
draw(ht)
ht = Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat), name = "Z-score", row_labels = rownames(mat.z))
draw(ht)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
browseVignettes("topGO")
View(deseq_df)
View(expression_df)
View(expression_df)
View(deseq_df)
View(deseq_df)
View(expression_df)
View(expression_df)
View(deseq_object)
View(deseq_object)
View(deseq_df)
View(ddset)
View(dds)
View(countData)
View(expression_df)
View(colDataCopy)
View(colData)
View(expression_df)
View(deseq_object)
View(deseq_results)
View(expression_df)
expression_df <- readr::read_tsv(data_file) %>%
expression_df <- readr::read_tsv(data_file)
expression_df <- readr::read_tsv(data_file)
View(expression_df)
View(expression_df)
View(deseq_df)
View(deseq_df)
